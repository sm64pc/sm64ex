diff --git a/Makefile b/Makefile
index 977ea0f..d9a2d90 100644
--- a/Makefile
+++ b/Makefile
@@ -30,6 +30,7 @@ TARGET_WEB ?= 0
 # Specify the target you are building for, 0 means native
 TARGET_ARCH ?= native
 TARGET_BITS ?= 0
+TARGET_RPI ?= 0
 
 ifneq ($(TARGET_BITS),0)
   BITS := -m$(TARGET_BITS)
@@ -79,7 +80,7 @@ ifeq ($(VERSION),sh)
   GRUCODE_ASFLAGS := --defsym F3D_NEW=1
   TARGET := sm64.sh
 # TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
-  NOEXTRACT := 1 
+  NOEXTRACT := 1
 else
   $(error unknown version "$(VERSION)")
 endif
@@ -242,8 +243,32 @@ endif
 endif
 
 # Use a default opt flag for gcc
-ifeq ($(COMPILER),gcc)
-  OPT_FLAGS := -O2
+ifeq ($(NON_MATCHING),1)
+	OPT_FLAGS := -O2
+endif
+
+ifeq ($(TARGET_RPI),1)
+           machine = $(shell sh -c 'uname -m 2>/dev/null || echo unknown')
+# Raspberry Pi B+, Zero, etc
+        ifneq (,$(findstring armv6l,$(machine)))
+                OPT_FLAGS := -march=armv6zk -mfpu=vfp -Ofast
+        endif
+
+# Raspberry Pi 2 and 3
+        ifneq (,$(findstring armv7l,$(machine)))
+                model = $(shell sh -c 'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo unknown')
+
+                ifneq (,$(findstring 3,$(model)))
+                         OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+                         else
+                         OPT_FLAGS := -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -O3
+                endif
+        endif
+
+# RPi4 / ARM A64 NEEDS TESTING 32BIT.
+        ifneq (,$(findstring aarch64,$(machine)))
+                 OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+        endif
 endif
 
 # File dependencies and variables for specific files
@@ -466,6 +491,7 @@ CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fn
 else ifeq ($(TARGET_WEB),1)
 CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
 CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+# Linux / Pi builds below
 else
 CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
 CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
@@ -479,9 +505,14 @@ else
 ifeq ($(WINDOWS_BUILD),1)
 LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
 else
+# Linux / Other Builds below
+ifeq ($(TARGET_RPI),1)
+LDFLAGS := $(OPT_FLAGS) -lm -lGLESv2 `$(CROSS)sdl2-config --libs` -no-pie
+else
 LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
 endif
 endif
+endif #Added for Pi ifeq
 
 endif
 
diff --git a/Makefile.bad b/Makefile.bad
new file mode 100644
index 0000000..c173e83
--- /dev/null
+++ b/Makefile.bad
@@ -0,0 +1,885 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+# Specify the target you are building for, 0 means native
+TARGET_ARCH ?= native
+TARGET_BITS ?= 0
+TARGET_RPI ?= 0
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -m$(TARGET_BITS)
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1 
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+ifeq ($(VERSION),sh)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  OPT_FLAGS += $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+# We can't remove 'ido' to gcc or else other dependencies break
+ifeq ($(NON_MATCHING),1) 
+	OPT_FLAGS := -O2
+endif
+
+ifeq ($(TARGET_RPI),1)
+           machine = $(shell sh -c 'uname -m 2>/dev/null || echo unknown')
+# Raspberry Pi B+, Zero, etc
+        ifneq (,$(findstring armv6l,$(machine)))
+                OPT_FLAGS := -march=armv6zk -mfpu=vfp -Ofast $(COMPILER)
+        endif
+
+# Raspberry Pi 2 and 3
+        ifneq (,$(findstring armv7l,$(machine)))
+                model = $(shell sh -c 'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo unknown')
+
+                ifneq (,$(findstring 3,$(model)))
+                         OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+                         else
+                         OPT_FLAGS := -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -O3
+                endif
+        endif
+
+# RPi4 / ARM A64 NEEDS TESTING 32BIT.
+        ifneq (,$(findstring aarch64,$(machine)))
+                 OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+        endif
+endif
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    D_802F4380.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c \
+    __osDevMgrMain.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+# Linux / Pi builds below
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+# Linux / Other Builds below
+ifeq ($(TARGET_RPI),1)
+LDFLAGS := $(OPT_FLAGS) -lm -lGLESv2 `$(CROSS)sdl2-config --libs` -no-pie
+else
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
+endif
+endif
+endif #Added for Pi ifeq
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+cleantools:
+	$(MAKE) -s -C tools clean
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+O_FILES += $(wildcard $(BUILD_DIR)/bin/$(VERSION)/*.o)
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
diff --git a/Makefile.base b/Makefile.base
new file mode 100644
index 0000000..a0f3f94
--- /dev/null
+++ b/Makefile.base
@@ -0,0 +1,853 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+# Specify the target you are building for, 0 means native
+TARGET_ARCH ?= native
+TARGET_BITS ?= 0
+TARGET_RPI ?= 0
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -m$(TARGET_BITS)
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1 
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+ifeq ($(VERSION),sh)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  OPT_FLAGS += $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+ifeq ($(COMPILER),gcc)
+  OPT_FLAGS := -O2
+endif
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    D_802F4380.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c \
+    __osDevMgrMain.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
+endif
+endif
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+cleantools:
+	$(MAKE) -s -C tools clean
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+O_FILES += $(wildcard $(BUILD_DIR)/bin/$(VERSION)/*.o)
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
diff --git a/Makefile.orig b/Makefile.orig
new file mode 100644
index 0000000..3e2b922
--- /dev/null
+++ b/Makefile.orig
@@ -0,0 +1,839 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+
+TARGET_ARCH ?= i686
+TARGET_BITS ?= 32
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -march=native -mfpu=vfp -Ofast
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1 
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+ifeq ($(COMPILER),gcc)
+  OPT_FLAGS := $(BITS)
+endif
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)pkg-config --cflags libusb-1.0 glfw3` `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)pkg-config --cflags libusb-1.0 glfw3` `$(CROSS)sdl2-coonfig --cflags --libs`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+LDFLAGS := $(BITS) -lm -lGLESv2 `$(CROSS)sdl2-config --cflags --libs` -no-pie `$(CROSS)pkg-config --libs libusb-1.0 glfw3`
+endif
+endif
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+	
+#Required so the compiler doesn't complain about this not existing.
+$(BUILD_DIR)/src/game/camera.o: $(BUILD_DIR)/include/text_strings.h
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
diff --git a/Makefile.rpic b/Makefile.rpic
new file mode 100644
index 0000000..e9dc5d3
--- /dev/null
+++ b/Makefile.rpic
@@ -0,0 +1,892 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+# Specify the target you are building for, 0 means native
+TARGET_ARCH ?= native
+TARGET_BITS ?= 0
+TARGET_RPI ?= 0
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -m$(TARGET_BITS)
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1 
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+ifeq ($(VERSION),sh)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  OPT_FLAGS += $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+ifeq ($(COMPILER),gcc)
+
+ifeq ($(TARGET_RPI),1)
+           machine = $(shell sh -c 'uname -m 2>/dev/null || echo unknown')
+# Raspberry Pi B+, Zero, etc
+        ifneq (,$(findstring armv6l,$(machine)))
+                OPT_FLAGS := -march=armv6zk -mfpu=vfp -Ofast
+        endif
+
+# Raspberry Pi 2 and 3
+        ifeq (,$(findstring armv7l,$(machine)))
+                model = $(shell sh -c 'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo unknown')
+
+                ifeq (,$(findstring 3,$(model)))
+                         OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+                         else
+                         OPT_FLAGS := -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -O3
+                endif
+        endif
+
+# RPi4 / ARM A64 NEEDS TESTING 32BIT.
+        ifeq (,$(findstring aarch64,$(machine)))
+                 OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+        endif
+
+else
+   OPT_FLAGS := NotPi
+
+endif
+   #OPT_FLAGS := -O2
+# End of RPi Opti/Config fixes for ARM GCC
+#else
+   #OPT_FLAGS := lol  #God please help me here.
+endif
+    #OPT_FLAGS := -O2
+
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    D_802F4380.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c \
+    __osDevMgrMain.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+# Linux / Pi builds below
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+# Linux / Other Builds below
+ifeq ($(TARGET_RPI),1)
+LDFLAGS := $(OPT_FLAGS) -lm -lGLESv2 `$(CROSS)sdl2-config --libs` -no-pie
+else
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
+endif
+endif
+endif #Added for Pi ifeq
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+cleantools:
+	$(MAKE) -s -C tools clean
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+O_FILES += $(wildcard $(BUILD_DIR)/bin/$(VERSION)/*.o)
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
diff --git a/Makefile.rpiv2 b/Makefile.rpiv2
new file mode 100644
index 0000000..c509185
--- /dev/null
+++ b/Makefile.rpiv2
@@ -0,0 +1,883 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+# Specify the target you are building for, 0 means native
+TARGET_ARCH ?= native
+TARGET_BITS ?= 0
+TARGET_RPI ?= 0
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -m$(TARGET_BITS)
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1 
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+ifeq ($(VERSION),sh)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  OPT_FLAGS += $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+ifeq ($(COMPILER),gcc)
+	OPT_FLAGS := -O2
+endif
+
+ifeq ($(TARGET_RPI),1)
+           machine = $(shell sh -c 'uname -m 2>/dev/null || echo unknown')
+# Raspberry Pi B+, Zero, etc
+        ifneq (,$(findstring armv6l,$(machine)))
+                OPT_FLAGS := -march=armv6zk -mfpu=vfp -Ofast
+        endif
+
+# Raspberry Pi 2 and 3
+        ifneq (,$(findstring armv7l,$(machine)))
+                model = $(shell sh -c 'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo unknown')
+
+                ifneq (,$(findstring 3,$(model)))
+                         OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+                         else
+                         OPT_FLAGS := -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -O3
+                endif
+        endif
+
+# RPi4 / ARM A64 NEEDS TESTING 32BIT.
+        ifneq (,$(findstring aarch64,$(machine)))
+                 OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+        endif
+endif
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    D_802F4380.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c \
+    __osDevMgrMain.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+# Linux / Pi builds below
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+# Linux / Other Builds below
+ifeq ($(TARGET_RPI),1)
+LDFLAGS := $(OPT_FLAGS) -lm -lGLESv2 `$(CROSS)sdl2-config --libs` -no-pie
+else
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
+endif
+endif
+endif #Added for Pi ifeq
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+cleantools:
+	$(MAKE) -s -C tools clean
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+O_FILES += $(wildcard $(BUILD_DIR)/bin/$(VERSION)/*.o)
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
diff --git a/Makefile.rpiv3 b/Makefile.rpiv3
new file mode 100644
index 0000000..d9a2d90
--- /dev/null
+++ b/Makefile.rpiv3
@@ -0,0 +1,883 @@
+# Makefile to rebuild SM64 split image
+
+### Default target ###
+
+default: all
+
+### Build Options ###
+
+# These options can either be changed by modifying the makefile, or
+# by building with 'make SETTING=value'. 'make clean' may be required.
+
+# Version of the game to build
+VERSION ?= us
+# Graphics microcode used
+GRUCODE ?= f3d_old
+# If COMPARE is 1, check the output sha1sum when building 'all'
+COMPARE ?= 1
+# If NON_MATCHING is 1, define the NON_MATCHING and AVOID_UB macros when building (recommended)
+NON_MATCHING ?= 0
+# Build for the N64 (turn this off for ports)
+TARGET_N64 ?= 0
+# Compiler to use (ido or gcc)
+COMPILER ?= ido
+
+ifeq ($(COMPILER),gcc)
+  NON_MATCHING := 1
+endif
+# Build for Emscripten/WebGL
+TARGET_WEB ?= 0
+# Specify the target you are building for, 0 means native
+TARGET_ARCH ?= native
+TARGET_BITS ?= 0
+TARGET_RPI ?= 0
+
+ifneq ($(TARGET_BITS),0)
+  BITS := -m$(TARGET_BITS)
+else
+  BITS :=
+endif
+
+# Automatic settings only for ports
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+  GRUCODE := f3dex2e
+  WINDOWS_BUILD := 0
+  ifeq ($(TARGET_WEB),0)
+    ifeq ($(OS),Windows_NT)
+      WINDOWS_BUILD := 1
+    endif
+  endif
+
+# Release
+
+ifeq ($(VERSION),jp)
+  VERSION_CFLAGS := -DVERSION_JP
+  VERSION_ASFLAGS := --defsym VERSION_JP=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.jp
+else
+ifeq ($(VERSION),us)
+  VERSION_CFLAGS := -DVERSION_US
+  VERSION_ASFLAGS := --defsym VERSION_US=1
+  GRUCODE_CFLAGS := -DF3D_OLD
+  GRUCODE_ASFLAGS := --defsym F3D_OLD=1
+  TARGET := sm64.us
+else
+ifeq ($(VERSION),eu)
+  VERSION_CFLAGS := -DVERSION_EU
+  VERSION_ASFLAGS := --defsym VERSION_EU=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.eu
+else
+ifeq ($(VERSION),sh)
+  $(warning Building SH is experimental and is prone to breaking. Try at your own risk.)
+  VERSION_CFLAGS := -DVERSION_SH
+  VERSION_ASFLAGS := --defsym VERSION_SH=1
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := sm64.sh
+# TODO: GET RID OF THIS!!! We should mandate assets for Shindou like EU but we dont have the addresses extracted yet so we'll just pretend you have everything extracted for now.
+  NOEXTRACT := 1
+else
+  $(error unknown version "$(VERSION)")
+endif
+endif
+endif
+endif
+
+# Microcode
+
+ifeq ($(GRUCODE),f3dex) # Fast3DEX
+  GRUCODE_CFLAGS := -DF3DEX_GBI
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI=1
+  TARGET := $(TARGET).f3dex
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2) # Fast3DEX2
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DEX_GBI_2=1
+  TARGET := $(TARGET).f3dex2
+  COMPARE := 0
+else
+ifeq ($(GRUCODE), f3dex2e) # Fast3DEX2 Extended (for PC)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2E
+  TARGET := $(TARGET).f3dex2e
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3d_new) # Fast3D 2.0H (Shindou)
+  GRUCODE_CFLAGS := -DF3D_NEW
+  GRUCODE_ASFLAGS := --defsym F3D_NEW=1
+  TARGET := $(TARGET).f3d_new
+  COMPARE := 0
+else
+ifeq ($(GRUCODE),f3dzex) # Fast3DZEX (2.0J / Animal Forest - Dōbutsu no Mori)
+  $(warning Fast3DZEX is experimental. Try at your own risk.)
+  GRUCODE_CFLAGS := -DF3DEX_GBI_2
+  GRUCODE_ASFLAGS := --defsym F3DEX_GBI_SHARED=1 --defsym F3DZEX_GBI=1
+  TARGET := $(TARGET).f3dzex
+  COMPARE := 0
+endif
+endif
+endif
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  NON_MATCHING := 1
+endif
+
+ifeq ($(NON_MATCHING),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DNON_MATCHING -DAVOID_UB
+  VERSION_ASFLAGS := --defsym AVOID_UB=1
+  COMPARE := 0
+endif
+
+ifeq ($(TARGET_WEB),1)
+  VERSION_CFLAGS := $(VERSION_CFLAGS) -DTARGET_WEB
+endif
+
+################### Universal Dependencies ###################
+
+# (This is a bit hacky, but a lot of rules implicitly depend
+# on tools and assets, and we use directory globs further down
+# in the makefile that we want should cover assets.)
+
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(MAKECMDGOALS),distclean)
+
+# Make sure assets exist
+NOEXTRACT ?= 0
+ifeq ($(NOEXTRACT),0)
+DUMMY != ./extract_assets.py $(VERSION) >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to extract assets)
+endif
+endif
+
+# Make tools if out of date
+DUMMY != make -s -C tools >&2 || echo FAIL
+ifeq ($(DUMMY),FAIL)
+  $(error Failed to build tools)
+endif
+
+endif
+endif
+
+################ Target Executable and Sources ###############
+
+# BUILD_DIR is location where all build artifacts are placed
+BUILD_DIR_BASE := build
+ifeq ($(TARGET_N64),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)
+else
+ifeq ($(TARGET_WEB),1)
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_web
+else
+  BUILD_DIR := $(BUILD_DIR_BASE)/$(VERSION)_pc
+endif
+endif
+
+LIBULTRA := $(BUILD_DIR)/libultra.a
+ifeq ($(TARGET_WEB),1)
+EXE := $(BUILD_DIR)/$(TARGET).html
+else
+ifeq ($(WINDOWS_BUILD),1)
+EXE := $(BUILD_DIR)/$(TARGET).exe
+else
+EXE := $(BUILD_DIR)/$(TARGET)
+endif
+endif
+ROM := $(BUILD_DIR)/$(TARGET).z64
+ELF := $(BUILD_DIR)/$(TARGET).elf
+LD_SCRIPT := sm64.ld
+MIO0_DIR := $(BUILD_DIR)/bin
+SOUND_BIN_DIR := $(BUILD_DIR)/sound
+TEXTURE_DIR := textures
+ACTOR_DIR := actors
+LEVEL_DIRS := $(patsubst levels/%,%,$(dir $(wildcard levels/*/header.h)))
+
+# Directories containing source files
+SRC_DIRS := src src/engine src/game src/audio src/menu src/buffers actors levels bin data assets
+ASM_DIRS := lib
+ifeq ($(TARGET_N64),1)
+  ASM_DIRS := asm $(ASM_DIRS)
+else
+  SRC_DIRS := $(SRC_DIRS) src/pc src/pc/gfx src/pc/audio src/pc/controller
+  ASM_DIRS :=
+endif
+BIN_DIRS := bin bin/$(VERSION)
+
+ULTRA_SRC_DIRS := lib/src lib/src/math
+ULTRA_ASM_DIRS := lib/asm lib/data
+ULTRA_BIN_DIRS := lib/bin
+
+GODDARD_SRC_DIRS := src/goddard src/goddard/dynlists
+
+MIPSISET := -mips2
+MIPSBIT := -32
+
+ifeq ($(COMPILER),gcc)
+  MIPSISET := -mips3
+endif
+
+ifeq ($(VERSION),eu)
+  OPT_FLAGS := -O2
+else
+ifeq ($(VERSION),sh)
+  OPT_FLAGS := -O2
+else
+  OPT_FLAGS := -g
+endif
+endif
+
+ifeq ($(TARGET_N64),0)
+  OPT_FLAGS += $(BITS)
+endif
+
+ifeq ($(TARGET_WEB),1)
+  OPT_FLAGS := -O2 -g4 --source-map-base http://localhost:8080/
+endif
+endif
+
+# Use a default opt flag for gcc
+ifeq ($(NON_MATCHING),1)
+	OPT_FLAGS := -O2
+endif
+
+ifeq ($(TARGET_RPI),1)
+           machine = $(shell sh -c 'uname -m 2>/dev/null || echo unknown')
+# Raspberry Pi B+, Zero, etc
+        ifneq (,$(findstring armv6l,$(machine)))
+                OPT_FLAGS := -march=armv6zk -mfpu=vfp -Ofast
+        endif
+
+# Raspberry Pi 2 and 3
+        ifneq (,$(findstring armv7l,$(machine)))
+                model = $(shell sh -c 'cat /sys/firmware/devicetree/base/model 2>/dev/null || echo unknown')
+
+                ifneq (,$(findstring 3,$(model)))
+                         OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+                         else
+                         OPT_FLAGS := -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -O3
+                endif
+        endif
+
+# RPi4 / ARM A64 NEEDS TESTING 32BIT.
+        ifneq (,$(findstring aarch64,$(machine)))
+                 OPT_FLAGS := -march=armv8-a+crc -mtune=cortex-a53 -mfpu=neon-fp-armv8 -O3
+        endif
+endif
+
+# File dependencies and variables for specific files
+include Makefile.split
+
+# Source code files
+LEVEL_C_FILES := $(wildcard levels/*/leveldata.c) $(wildcard levels/*/script.c) $(wildcard levels/*/geo.c)
+C_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.c)) $(LEVEL_C_FILES)
+CXX_FILES := $(foreach dir,$(SRC_DIRS),$(wildcard $(dir)/*.cpp))
+S_FILES := $(foreach dir,$(ASM_DIRS),$(wildcard $(dir)/*.s))
+ULTRA_C_FILES := $(foreach dir,$(ULTRA_SRC_DIRS),$(wildcard $(dir)/*.c))
+GODDARD_C_FILES := $(foreach dir,$(GODDARD_SRC_DIRS),$(wildcard $(dir)/*.c))
+ifeq ($(TARGET_N64),1)
+  ULTRA_S_FILES := $(foreach dir,$(ULTRA_ASM_DIRS),$(wildcard $(dir)/*.s))
+endif
+GENERATED_C_FILES := $(BUILD_DIR)/assets/mario_anim_data.c $(BUILD_DIR)/assets/demo_data.c \
+  $(addprefix $(BUILD_DIR)/bin/,$(addsuffix _skybox.c,$(notdir $(basename $(wildcard textures/skyboxes/*.png)))))
+
+ifeq ($(WINDOWS_BUILD),0)
+  CXX_FILES :=
+endif
+
+ifneq ($(TARGET_N64),1)
+  ULTRA_C_FILES_SKIP := \
+    sqrtf.c \
+    string.c \
+    sprintf.c \
+    _Printf.c \
+    kdebugserver.c \
+    osInitialize.c \
+    func_802F7140.c \
+    func_802F71F0.c \
+    func_802F4A20.c \
+    EU_D_802f4330.c \
+    D_802F4380.c \
+    osLeoDiskInit.c \
+    osCreateThread.c \
+    osDestroyThread.c \
+    osStartThread.c \
+    osSetThreadPri.c \
+    osPiStartDma.c \
+    osPiRawStartDma.c \
+    osPiRawReadIo.c \
+    osPiGetCmdQueue.c \
+    osJamMesg.c \
+    osSendMesg.c \
+    osRecvMesg.c \
+    osSetEventMesg.c \
+    osTimer.c \
+    osSetTimer.c \
+    osSetTime.c \
+    osCreateViManager.c \
+    osViSetSpecialFeatures.c \
+    osVirtualToPhysical.c \
+    osViBlack.c \
+    osViSetEvent.c \
+    osViSetMode.c \
+    osViSwapBuffer.c \
+    osSpTaskLoadGo.c \
+    osCreatePiManager.c \
+    osGetTime.c \
+    osEepromProbe.c \
+    osEepromWrite.c \
+    osEepromLongWrite.c \
+    osEepromRead.c \
+    osEepromLongRead.c \
+    osContInit.c \
+    osContStartReadData.c \
+    osAiGetLength.c \
+    osAiSetFrequency.c \
+    osAiSetNextBuffer.c \
+    __osViInit.c \
+    __osSyncPutChars.c \
+    __osAtomicDec.c \
+    __osSiRawStartDma.c \
+    __osViSwapContext.c \
+    __osViGetCurrentContext.c \
+    __osDevMgrMain.c
+
+  C_FILES := $(filter-out src/game/main.c,$(C_FILES))
+  ULTRA_C_FILES := $(filter-out $(addprefix lib/src/,$(ULTRA_C_FILES_SKIP)),$(ULTRA_C_FILES))
+endif
+
+ifeq ($(VERSION),sh)
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/jp/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/jp/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+else
+SOUND_BANK_FILES := $(wildcard sound/sound_banks/*.json)
+SOUND_SEQUENCE_FILES := $(wildcard sound/sequences/$(VERSION)/*.m64) \
+    $(wildcard sound/sequences/*.m64) \
+    $(foreach file,$(wildcard sound/sequences/$(VERSION)/*.s),$(BUILD_DIR)/$(file:.s=.m64)) \
+    $(foreach file,$(wildcard sound/sequences/*.s),$(BUILD_DIR)/$(file:.s=.m64))
+endif
+
+SOUND_SAMPLE_DIRS := $(wildcard sound/samples/*)
+SOUND_SAMPLE_AIFFS := $(foreach dir,$(SOUND_SAMPLE_DIRS),$(wildcard $(dir)/*.aiff))
+SOUND_SAMPLE_TABLES := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.table))
+SOUND_SAMPLE_AIFCS := $(foreach file,$(SOUND_SAMPLE_AIFFS),$(BUILD_DIR)/$(file:.aiff=.aifc))
+SOUND_OBJ_FILES := $(SOUND_BIN_DIR)/sound_data.ctl.o \
+                   $(SOUND_BIN_DIR)/sound_data.tbl.o \
+                   $(SOUND_BIN_DIR)/sequences.bin.o \
+                   $(SOUND_BIN_DIR)/bank_sets.o
+
+
+# Object files
+O_FILES := $(foreach file,$(C_FILES),$(BUILD_DIR)/$(file:.c=.o)) \
+           $(foreach file,$(CXX_FILES),$(BUILD_DIR)/$(file:.cpp=.o)) \
+           $(foreach file,$(S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+           $(foreach file,$(GENERATED_C_FILES),$(file:.c=.o))
+
+ULTRA_O_FILES := $(foreach file,$(ULTRA_S_FILES),$(BUILD_DIR)/$(file:.s=.o)) \
+                 $(foreach file,$(ULTRA_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+GODDARD_O_FILES := $(foreach file,$(GODDARD_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+
+# Automatic dependency files
+DEP_FILES := $(O_FILES:.o=.d) $(ULTRA_O_FILES:.o=.d) $(GODDARD_O_FILES:.o=.d) $(BUILD_DIR)/$(LD_SCRIPT).d
+
+# Files with GLOBAL_ASM blocks
+ifneq ($(NON_MATCHING),1)
+GLOBAL_ASM_C_FILES != grep -rl 'GLOBAL_ASM(' $(wildcard src/**/*.c)
+GLOBAL_ASM_O_FILES = $(foreach file,$(GLOBAL_ASM_C_FILES),$(BUILD_DIR)/$(file:.c=.o))
+GLOBAL_ASM_DEP = $(BUILD_DIR)/src/audio/non_matching_dep
+endif
+
+# Segment elf files
+SEG_FILES := $(SEGMENT_ELF_FILES) $(ACTOR_ELF_FILES) $(LEVEL_ELF_FILES)
+
+##################### Compiler Options #######################
+INCLUDE_CFLAGS := -I include -I $(BUILD_DIR) -I $(BUILD_DIR)/include -I src -I .
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(TARGET_N64),1)
+IRIX_ROOT := tools/ido5.3_compiler
+
+ifeq ($(shell type mips-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips-linux-gnu-
+else ifeq ($(shell type mips64-linux-gnu-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-linux-gnu-
+else ifeq ($(shell type mips64-elf-ld >/dev/null 2>/dev/null; echo $$?), 0)
+  CROSS := mips64-elf-
+endif
+
+# check that either QEMU_IRIX is set or qemu-irix package installed
+ifndef QEMU_IRIX
+  QEMU_IRIX := $(shell which qemu-irix)
+  ifeq (, $(QEMU_IRIX))
+    $(error Please install qemu-irix package or set QEMU_IRIX env var to the full qemu-irix binary path)
+  endif
+endif
+
+AS        := $(CROSS)as
+CC        := $(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/bin/cc
+CPP       := cpp -P -Wno-trigraphs
+LD        := $(CROSS)ld
+AR        := $(CROSS)ar
+OBJDUMP   := $(CROSS)objdump
+OBJCOPY   := $(CROSS)objcopy
+PYTHON    := python3
+
+# change the compiler to gcc, to use the default, install the gcc-mips-linux-gnu package
+ifeq ($(COMPILER),gcc)
+  CC        := $(CROSS)gcc
+endif
+
+ifeq ($(TARGET_N64),1)
+  TARGET_CFLAGS := -nostdinc -I include/libc -DTARGET_N64
+  CC_CFLAGS := -fno-builtin
+endif
+
+# Check code syntax with host compiler
+CC_CHECK := gcc -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
+
+COMMON_CFLAGS = $(OPT_FLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(MIPSISET) $(GRUCODE_CFLAGS)
+
+ASFLAGS := -march=vr4300 -mabi=32 -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS) $(GRUCODE_ASFLAGS)
+CFLAGS = -Wab,-r4300_mul -non_shared -G 0 -Xcpluscomm -Xfullwarn -signed $(COMMON_CFLAGS) $(MIPSBIT)
+OBJCOPYFLAGS := --pad-to=0x800000 --gap-fill=0xFF
+SYMBOL_LINKING_FLAGS := $(addprefix -R ,$(SEG_FILES))
+LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
+ENDIAN_BITWIDTH := $(BUILD_DIR)/endian-and-bitwidth
+
+ifeq ($(COMPILER),gcc)
+  CFLAGS := -march=vr4300 -mfix4300 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
+endif
+
+ifeq ($(shell getconf LONG_BIT), 32)
+  # Work around memory allocation bug in QEMU
+  export QEMU_GUEST_BASE := 1
+else
+  # Ensure that gcc treats the code as 32-bit
+  CC_CHECK += $(BITS)
+endif
+
+else # TARGET_N64
+
+AS := as
+ifneq ($(TARGET_WEB),1)
+  CC := $(CROSS)gcc
+  CXX := $(CROSS)g++
+else
+  CC := emcc
+endif
+ifeq ($(WINDOWS_BUILD),1)
+  LD := $(CXX)
+else
+  LD := $(CC)
+endif
+CPP := cpp -P
+OBJDUMP := objdump
+OBJCOPY := objcopy
+PYTHON := python3
+
+ifeq ($(WINDOWS_BUILD),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+else ifeq ($(TARGET_WEB),1)
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -s USE_SDL=2
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv -s USE_SDL=2
+# Linux / Pi builds below
+else
+CC_CHECK := $(CC) -fsyntax-only -fsigned-char $(INCLUDE_CFLAGS) -Wall -Wextra -Wno-format-security $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) `$(CROSS)sdl2-config --cflags`
+CFLAGS := $(OPT_FLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -fno-strict-aliasing -fwrapv `$(CROSS)sdl2-config --cflags`
+endif
+
+ASFLAGS := -I include -I $(BUILD_DIR) $(VERSION_ASFLAGS)
+
+ifeq ($(TARGET_WEB),1)
+LDFLAGS := -lm -lGL -lSDL2 -no-pie -s TOTAL_MEMORY=20MB -g4 --source-map-base http://localhost:8080/ -s "EXTRA_EXPORTED_RUNTIME_METHODS=['callMain']"
+else
+ifeq ($(WINDOWS_BUILD),1)
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -Llib -lpthread -lglew32 `$(CROSS)sdl2-config --static-libs` -lm -lglu32 -lsetupapi -ldinput8 -luser32 -lgdi32 -limm32 -lole32 -loleaut32 -lshell32 -lwinmm -lversion -luuid -lopengl32 -no-pie -static
+else
+# Linux / Other Builds below
+ifeq ($(TARGET_RPI),1)
+LDFLAGS := $(OPT_FLAGS) -lm -lGLESv2 `$(CROSS)sdl2-config --libs` -no-pie
+else
+LDFLAGS := $(BITS) -march=$(TARGET_ARCH) -lm -lGL `$(CROSS)sdl2-config --libs` -no-pie -lpthread
+endif
+endif
+endif #Added for Pi ifeq
+
+endif
+
+# Prevent a crash with -sopt
+export LANG := C
+
+####################### Other Tools #########################
+
+# N64 tools
+TOOLS_DIR = tools
+MIO0TOOL = $(TOOLS_DIR)/mio0
+N64CKSUM = $(TOOLS_DIR)/n64cksum
+N64GRAPHICS = $(TOOLS_DIR)/n64graphics
+N64GRAPHICS_CI = $(TOOLS_DIR)/n64graphics_ci
+TEXTCONV = $(TOOLS_DIR)/textconv
+IPLFONTUTIL = $(TOOLS_DIR)/iplfontutil
+AIFF_EXTRACT_CODEBOOK = $(TOOLS_DIR)/aiff_extract_codebook
+VADPCM_ENC = $(TOOLS_DIR)/vadpcm_enc
+EXTRACT_DATA_FOR_MIO = $(TOOLS_DIR)/extract_data_for_mio
+SKYCONV = $(TOOLS_DIR)/skyconv
+EMULATOR = mupen64plus
+EMU_FLAGS = --noosd
+LOADER = loader64
+LOADER_FLAGS = -vwf
+SHA1SUM = sha1sum
+
+# Use Objcopy instead of extract_data_for_mio
+ifeq ($(COMPILER),gcc)
+EXTRACT_DATA_FOR_MIO := $(OBJCOPY) -O binary --only-section=.data
+endif
+
+###################### Dependency Check #####################
+
+ifeq ($(TARGET_N64),1)
+BINUTILS_VER_MAJOR := $(shell $(LD) --version | grep ^GNU | sed 's/^.* //; s/\..*//g')
+BINUTILS_VER_MINOR := $(shell $(LD) --version | grep ^GNU | sed 's/^[^.]*\.//; s/\..*//g')
+BINUTILS_DEPEND := $(shell expr $(BINUTILS_VER_MAJOR) \>= 2 \& $(BINUTILS_VER_MINOR) \>= 27)
+ifeq ($(BINUTILS_DEPEND),0)
+$(error binutils version 2.27 required, version $(BINUTILS_VER_MAJOR).$(BINUTILS_VER_MINOR) detected)
+endif
+endif
+
+######################## Targets #############################
+
+ifeq ($(TARGET_N64),1)
+all: $(ROM)
+ifeq ($(COMPARE),1)
+	@$(SHA1SUM) -c $(TARGET).sha1 || (echo 'The build succeeded, but did not match the official ROM. This is expected if you are making changes to the game.\nTo silence this message, use "make COMPARE=0"'. && false)
+endif
+else
+all: $(EXE)
+endif
+
+clean:
+	$(RM) -r $(BUILD_DIR_BASE)
+
+cleantools:
+	$(MAKE) -s -C tools clean
+
+distclean:
+	$(RM) -r $(BUILD_DIR_BASE)
+	./extract_assets.py --clean
+
+test: $(ROM)
+	$(EMULATOR) $(EMU_FLAGS) $<
+
+load: $(ROM)
+	$(LOADER) $(LOADER_FLAGS) $<
+
+libultra: $(BUILD_DIR)/libultra.a
+
+asm/boot.s: $(BUILD_DIR)/lib/bin/ipl3_font.bin
+
+$(BUILD_DIR)/lib/bin/ipl3_font.bin: lib/ipl3_font.png
+	$(IPLFONTUTIL) e $< $@
+
+$(BUILD_DIR)/include/text_strings.h: include/text_strings.h.in
+	$(TEXTCONV) charmap.txt $< $@
+
+$(BUILD_DIR)/include/text_menu_strings.h: include/text_menu_strings.h.in
+	$(TEXTCONV) charmap_menu.txt $< $@
+
+ifeq ($(COMPILER),gcc)
+$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
+endif
+
+ifeq ($(VERSION),eu)
+TEXT_DIRS := text/de text/us text/fr
+
+# EU encoded text inserted into individual segment 0x19 files,
+# and course data also duplicated in leveldata.c
+$(BUILD_DIR)/bin/eu/translation_en.o: $(BUILD_DIR)/text/us/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_de.o: $(BUILD_DIR)/text/de/define_text.inc.c
+$(BUILD_DIR)/bin/eu/translation_fr.o: $(BUILD_DIR)/text/fr/define_text.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/us/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/de/define_courses.inc.c
+$(BUILD_DIR)/levels/menu/leveldata.o: $(BUILD_DIR)/text/fr/define_courses.inc.c
+
+else
+ifeq ($(VERSION),sh)
+TEXT_DIRS := text/jp
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/jp/define_text.inc.c
+
+else
+TEXT_DIRS := text/$(VERSION)
+
+# non-EU encoded text inserted into segment 0x02
+$(BUILD_DIR)/bin/segment2.o: $(BUILD_DIR)/text/$(VERSION)/define_text.inc.c
+endif
+endif
+
+
+$(BUILD_DIR)/text/%/define_courses.inc.c: text/define_courses.inc.c text/%/courses.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+$(BUILD_DIR)/text/%/define_text.inc.c: text/define_text.inc.c text/%/courses.h text/%/dialogs.h
+	$(CPP) $(VERSION_CFLAGS) $< -o $@ -I text/$*/
+	$(TEXTCONV) charmap.txt $@ $@
+
+O_FILES += $(wildcard $(BUILD_DIR)/bin/$(VERSION)/*.o)
+
+ALL_DIRS := $(BUILD_DIR) $(addprefix $(BUILD_DIR)/,$(SRC_DIRS) $(ASM_DIRS) $(GODDARD_SRC_DIRS) $(ULTRA_SRC_DIRS) $(ULTRA_ASM_DIRS) $(ULTRA_BIN_DIRS) $(BIN_DIRS) $(TEXTURE_DIRS) $(TEXT_DIRS) $(SOUND_SAMPLE_DIRS) $(addprefix levels/,$(LEVEL_DIRS)) include) $(MIO0_DIR) $(addprefix $(MIO0_DIR)/,$(VERSION)) $(SOUND_BIN_DIR) $(SOUND_BIN_DIR)/sequences/$(VERSION)
+
+# Make sure build directory exists before compiling anything
+DUMMY != mkdir -p $(ALL_DIRS)
+
+$(BUILD_DIR)/include/text_strings.h: $(BUILD_DIR)/include/text_menu_strings.h
+$(BUILD_DIR)/src/menu/file_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/menu/star_select.o: $(BUILD_DIR)/include/text_strings.h
+$(BUILD_DIR)/src/game/ingame_menu.o: $(BUILD_DIR)/include/text_strings.h
+
+################################################################
+# TEXTURE GENERATION                                           #
+################################################################
+
+# RGBA32, RGBA16, IA16, IA8, IA4, IA1, I8, I4
+$(BUILD_DIR)/%: %.png
+	$(N64GRAPHICS) -i $@ -g $< -f $(lastword $(subst ., ,$@))
+
+$(BUILD_DIR)/%.inc.c: $(BUILD_DIR)/% %.png
+	hexdump -v -e '1/1 "0x%X,"' $< > $@
+	echo >> $@
+
+# Color Index CI8
+$(BUILD_DIR)/%.ci8: %.ci8.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci8
+
+# Color Index CI4
+$(BUILD_DIR)/%.ci4: %.ci4.png
+	$(N64GRAPHICS_CI) -i $@ -g $< -f ci4
+
+################################################################
+
+# compressed segment generation
+
+ifeq ($(TARGET_N64),1)
+# TODO: ideally this would be `-Trodata-segment=0x07000000` but that doesn't set the address
+
+$(BUILD_DIR)/bin/%.elf: $(BUILD_DIR)/bin/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+$(BUILD_DIR)/actors/%.elf: $(BUILD_DIR)/actors/%.o
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map -o $@ $<
+
+# Override for level.elf, which otherwise matches the above pattern
+.SECONDEXPANSION:
+$(BUILD_DIR)/levels/%/leveldata.elf: $(BUILD_DIR)/levels/%/leveldata.o $(BUILD_DIR)/bin/$$(TEXTURE_BIN).elf
+	$(LD) -e 0 -Ttext=$(SEGMENT_ADDRESS) -Map $@.map --just-symbols=$(BUILD_DIR)/bin/$(TEXTURE_BIN).elf -o $@ $<
+
+$(BUILD_DIR)/bin/%.bin: $(BUILD_DIR)/bin/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/actors/%.bin: $(BUILD_DIR)/actors/%.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/levels/%/leveldata.bin: $(BUILD_DIR)/levels/%/leveldata.elf
+	$(EXTRACT_DATA_FOR_MIO) $< $@
+
+$(BUILD_DIR)/%.mio0: $(BUILD_DIR)/%.bin
+	$(MIO0TOOL) $< $@
+
+$(BUILD_DIR)/%.mio0.o: $(BUILD_DIR)/%.mio0.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.mio0.s: $(BUILD_DIR)/%.mio0
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+endif
+
+$(BUILD_DIR)/%.table: %.aiff
+	$(AIFF_EXTRACT_CODEBOOK) $< >$@
+
+$(BUILD_DIR)/%.aifc: $(BUILD_DIR)/%.table %.aiff
+	$(VADPCM_ENC) -c $^ $@
+
+$(ENDIAN_BITWIDTH): tools/determine-endian-bitwidth.c
+	$(CC) -c $(CFLAGS) -o $@.dummy2 $< 2>$@.dummy1; true
+	grep -o 'msgbegin --endian .* --bitwidth .* msgend' $@.dummy1 > $@.dummy2
+	head -n1 <$@.dummy2 | cut -d' ' -f2-5 > $@
+	@rm $@.dummy1
+	@rm $@.dummy2
+
+$(SOUND_BIN_DIR)/sound_data.ctl: sound/sound_banks/ $(SOUND_BANK_FILES) $(SOUND_SAMPLE_AIFCS) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py $(BUILD_DIR)/sound/samples/ sound/sound_banks/ $(SOUND_BIN_DIR)/sound_data.ctl $(SOUND_BIN_DIR)/sound_data.tbl $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+
+$(SOUND_BIN_DIR)/sound_data.tbl: $(SOUND_BIN_DIR)/sound_data.ctl
+	@true
+
+ifeq ($(VERSION),sh)
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/jp/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+else
+$(SOUND_BIN_DIR)/sequences.bin: $(SOUND_BANK_FILES) sound/sequences.json sound/sequences/ sound/sequences/$(VERSION)/ $(SOUND_SEQUENCE_FILES) $(ENDIAN_BITWIDTH)
+	$(PYTHON) tools/assemble_sound.py --sequences $@ $(SOUND_BIN_DIR)/bank_sets sound/sound_banks/ sound/sequences.json $(SOUND_SEQUENCE_FILES) $(VERSION_CFLAGS) $$(cat $(ENDIAN_BITWIDTH))
+endif
+
+$(SOUND_BIN_DIR)/bank_sets: $(SOUND_BIN_DIR)/sequences.bin
+	@true
+
+$(SOUND_BIN_DIR)/%.m64: $(SOUND_BIN_DIR)/%.o
+	$(OBJCOPY) -j .rodata $< -O binary $@
+
+$(SOUND_BIN_DIR)/%.o: $(SOUND_BIN_DIR)/%.s
+	$(AS) $(ASFLAGS) -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(SOUND_BIN_DIR)/%.s: $(SOUND_BIN_DIR)/%
+	printf ".section .data\n\n.incbin \"$<\"\n" > $@
+else
+$(SOUND_BIN_DIR)/sound_data.ctl.c: $(SOUND_BIN_DIR)/sound_data.ctl
+	echo "unsigned char gSoundDataADSR[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sound_data.tbl.c: $(SOUND_BIN_DIR)/sound_data.tbl
+	echo "unsigned char gSoundDataRaw[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/sequences.bin.c: $(SOUND_BIN_DIR)/sequences.bin
+	echo "unsigned char gMusicData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+
+$(SOUND_BIN_DIR)/bank_sets.c: $(SOUND_BIN_DIR)/bank_sets
+	echo "unsigned char gBankSetsData[] = {" > $@
+	hexdump -v -e '1/1 "0x%X,"' $< >> $@
+	echo "};" >> $@
+endif
+
+$(BUILD_DIR)/levels/scripts.o: $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/include/level_headers.h: levels/level_headers.h.in
+	$(CPP) -I . levels/level_headers.h.in | $(PYTHON) tools/output_level_headers.py > $(BUILD_DIR)/include/level_headers.h
+
+$(BUILD_DIR)/assets/mario_anim_data.c: $(wildcard assets/anims/*.inc.c)
+	$(PYTHON) tools/mario_anims_converter.py > $@
+
+$(BUILD_DIR)/assets/demo_data.c: assets/demo_data.json $(wildcard assets/demos/*.bin)
+	$(PYTHON) tools/demo_data_converter.py assets/demo_data.json $(VERSION_CFLAGS) > $@
+
+ifeq ($(COMPILER),ido)
+# Source code
+$(BUILD_DIR)/levels/%/leveldata.o: OPT_FLAGS := -g
+$(BUILD_DIR)/actors/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/bin/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: OPT_FLAGS := -g
+$(BUILD_DIR)/src/goddard/%.o: MIPSISET := -mips1
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2 -framepointer -Wo,-loopunroll,0
+$(BUILD_DIR)/lib/src/%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/math/ll%.o: MIPSISET := -mips3 -32
+$(BUILD_DIR)/lib/src/math/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/math/ll%.o: OPT_FLAGS :=
+$(BUILD_DIR)/lib/src/ldiv.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/string.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/lib/src/gu%.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/al%.o: OPT_FLAGS := -O3
+
+ifeq ($(VERSION),eu)
+$(BUILD_DIR)/lib/src/_Litob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Ldtob.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/_Printf.o: OPT_FLAGS := -O3
+$(BUILD_DIR)/lib/src/sprintf.o: OPT_FLAGS := -O3
+
+# enable loop unrolling except for external.c (external.c might also have used
+# unrolling, but it makes one loop harder to match)
+$(BUILD_DIR)/src/audio/%.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/load.o: OPT_FLAGS := -O2
+$(BUILD_DIR)/src/audio/external.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0
+else
+
+# The source-to-source optimizer copt is enabled for audio. This makes it use
+# acpp, which needs -Wp,-+ to handle C++-style comments.
+$(BUILD_DIR)/src/audio/effects.o: OPT_FLAGS := -O2 -Wo,-loopunroll,0 -sopt,-inline=sequence_channel_process_sound,-scalaroptimize=1 -Wp,-+
+$(BUILD_DIR)/src/audio/synthesis.o: OPT_FLAGS := -O2 -sopt,-scalaroptimize=1 -Wp,-+
+
+# Add a target for build/eu/src/audio/*.copt to make it easier to see debug
+$(BUILD_DIR)/src/audio/%.acpp: src/audio/%.c
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/acpp $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) $(VERSION_CFLAGS) $(GRUCODE_CFLAGS) -D__sgi -+ $< > $@ 
+$(BUILD_DIR)/src/audio/%.copt: $(BUILD_DIR)/src/audio/%.acpp
+	$(QEMU_IRIX) -silent -L $(IRIX_ROOT) $(IRIX_ROOT)/usr/lib/copt -signed -I=$< -CMP=$@ -cp=i -scalaroptimize=1
+endif
+endif
+
+ifeq ($(NON_MATCHING),0)
+$(GLOBAL_ASM_O_FILES): CC := $(PYTHON) tools/asm_processor/build.py $(CC) -- $(AS) $(ASFLAGS) --
+endif
+
+# Rebuild files with 'GLOBAL_ASM' if the NON_MATCHING flag changes.
+$(GLOBAL_ASM_O_FILES): $(GLOBAL_ASM_DEP).$(NON_MATCHING)
+$(GLOBAL_ASM_DEP).$(NON_MATCHING):
+	@rm -f $(GLOBAL_ASM_DEP).*
+	touch $@
+
+$(BUILD_DIR)/%.o: %.cpp
+	@$(CXX) -fsyntax-only $(CFLAGS) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CXX) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+$(BUILD_DIR)/%.o: $(BUILD_DIR)/%.c
+	@$(CC_CHECK) -MMD -MP -MT $@ -MF $(BUILD_DIR)/$*.d $<
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(BUILD_DIR)/%.o: %.s
+	$(AS) $(ASFLAGS) -MD $(BUILD_DIR)/$*.d -o $@ $<
+
+ifeq ($(TARGET_N64),1)
+$(BUILD_DIR)/$(LD_SCRIPT): $(LD_SCRIPT)
+	$(CPP) $(VERSION_CFLAGS) -MMD -MP -MT $@ -MF $@.d -I include/ -I . -DBUILD_DIR=$(BUILD_DIR) -o $@ $<
+
+$(BUILD_DIR)/libultra.a: $(ULTRA_O_FILES)
+	$(AR) rcs -o $@ $(ULTRA_O_FILES)
+	tools/patch_libultra_math $@
+
+$(BUILD_DIR)/libgoddard.a: $(GODDARD_O_FILES)
+	$(AR) rcs -o $@ $(GODDARD_O_FILES)
+
+$(ELF): $(O_FILES) $(MIO0_OBJ_FILES) $(SOUND_OBJ_FILES) $(SEG_FILES) $(BUILD_DIR)/$(LD_SCRIPT) undefined_syms.txt $(BUILD_DIR)/libultra.a $(BUILD_DIR)/libgoddard.a
+	$(LD) -L $(BUILD_DIR) $(LDFLAGS) -o $@ $(O_FILES)$(LIBS) -lultra -lgoddard
+
+$(ROM): $(ELF)
+	$(OBJCOPY) $(OBJCOPYFLAGS) $< $(@:.z64=.bin) -O binary
+	$(N64CKSUM) $(@:.z64=.bin) $@
+
+$(BUILD_DIR)/$(TARGET).objdump: $(ELF)
+	$(OBJDUMP) -D $< > $@
+
+else
+$(EXE): $(O_FILES) $(MIO0_FILES:.mio0=.o) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES)
+	$(LD) -L $(BUILD_DIR) -o $@ $(O_FILES) $(SOUND_OBJ_FILES) $(ULTRA_O_FILES) $(GODDARD_O_FILES) $(LDFLAGS)
+endif
+
+
+
+.PHONY: all clean distclean default diff test load libultra
+.PRECIOUS: $(BUILD_DIR)/bin/%.elf $(SOUND_BIN_DIR)/%.ctl $(SOUND_BIN_DIR)/%.tbl $(SOUND_SAMPLE_TABLES) $(SOUND_BIN_DIR)/%.s $(BUILD_DIR)/%
+.DELETE_ON_ERROR:
+
+# Remove built-in rules, to improve performance
+MAKEFLAGS += --no-builtin-rules
+
+-include $(DEP_FILES)
+
+print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true
